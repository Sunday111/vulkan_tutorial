#include "error_handling.h"

#include <cassert>

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define BCASE(x) case x: return TOSTRING(x)

std::string vk_result_to_string(VkResult vk_result)
{
    switch (vk_result)
    {
        BCASE(VK_SUCCESS);
        BCASE(VK_NOT_READY);
        BCASE(VK_TIMEOUT);
        BCASE(VK_EVENT_SET);
        BCASE(VK_EVENT_RESET);
        BCASE(VK_INCOMPLETE);
        BCASE(VK_ERROR_OUT_OF_HOST_MEMORY);
        BCASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
        BCASE(VK_ERROR_INITIALIZATION_FAILED);
        BCASE(VK_ERROR_DEVICE_LOST);
        BCASE(VK_ERROR_MEMORY_MAP_FAILED);
        BCASE(VK_ERROR_LAYER_NOT_PRESENT);
        BCASE(VK_ERROR_EXTENSION_NOT_PRESENT);
        BCASE(VK_ERROR_FEATURE_NOT_PRESENT);
        BCASE(VK_ERROR_INCOMPATIBLE_DRIVER);
        BCASE(VK_ERROR_TOO_MANY_OBJECTS);
        BCASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
        BCASE(VK_ERROR_FRAGMENTED_POOL);
        BCASE(VK_ERROR_UNKNOWN);
        BCASE(VK_ERROR_OUT_OF_POOL_MEMORY);
        BCASE(VK_ERROR_INVALID_EXTERNAL_HANDLE);
        BCASE(VK_ERROR_SURFACE_LOST_KHR);
        BCASE(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
        BCASE(VK_SUBOPTIMAL_KHR);
        BCASE(VK_ERROR_OUT_OF_DATE_KHR);
        BCASE(VK_ERROR_VALIDATION_FAILED_EXT);
    }

    assert(false);
    return "UNKNOWN ERROR CODE";
}
